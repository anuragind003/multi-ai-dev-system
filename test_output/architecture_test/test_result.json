{
  "files": [
    {
      "file_path": ".gitignore",
      "code": ".env\n__pycache__/\nnode_modules/\ndist/\n*.log"
    },
    {
      "file_path": "requirements.txt",
      "code": "fastapi==0.96.0\nuvicorn==0.22.0\npsycopg2-binary==2.9.7\npython-multipart==0.0.6\nSQLAlchemy==2.0.22\nalembic==1.11.1\npython-dotenv==1.0.0\npytest==7.4.0\npytest-cov==4.1.0\nflake8==6.0.0"
    },
    {
      "file_path": "package.json",
      "code": "{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My React App\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"tailwindcss\": \"^3.3.3\",\n    \"autoprefixer\": \"^10.4.14\",\n    \"postcss\": \"^8.4.27\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.15\",\n    \"@types/react-dom\": \"^18.2.7\",\n    \"@testing-library/jest-dom\": \"^5.16.5\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"typescript\": \"^5.0.2\"\n  }\n}"
    },
    {
      "file_path": "README.md",
      "code": "# My App\n\nThis is a sample web application built with React, FastAPI, and PostgreSQL.\n\n## Getting Started\n\n1. Clone the repository: `git clone <repository_url>`\n2. Install dependencies: `pip install -r requirements.txt` and `npm install`\n3. Run the application: `npm start` (frontend) and `uvicorn main:app --reload` (backend)\n\n## Architecture\n\n* **Frontend:** React with TypeScript and Tailwind CSS\n* **Backend:** FastAPI with Python and SQLAlchemy\n* **Database:** PostgreSQL\n\n## Deployment\n\nThis application is designed for deployment using Docker and Kubernetes on AWS.  See the `deploy` directory for deployment scripts and infrastructure as code.\n\n## Contributing\n\nSee the `CONTRIBUTING.md` file for guidelines on contributing to this project."
    },
    {
      "file_path": "CONTRIBUTING.md",
      "code": "# Contributing to My App\n\nThis project welcomes contributions!  Here's how you can get involved:\n\n1. **Fork the repository:** Create your own fork of the project on GitHub.\n2. **Create a branch:** Create a new branch for your changes.\n3. **Make your changes:** Implement your changes and ensure they adhere to the coding standards.\n4. **Test your changes:** Run the tests to ensure your changes don't break existing functionality.\n5. **Commit your changes:** Commit your changes with clear and concise messages.\n6. **Create a pull request:** Create a pull request to merge your changes into the main branch.\n\n## Coding Standards\n\n* Follow the PEP 8 style guide for Python.\n* Use TypeScript consistently in the React frontend.\n* Adhere to the project's coding style guide (if one exists).\n\n## Testing\n\nThis project uses a multi-level testing strategy:\n\n* **Unit tests:** Test individual components and functions.\n* **Integration tests:** Test the interaction between different components.\n* **End-to-end tests:** Test the entire application flow.\n\nEnsure all tests pass before submitting a pull request."
    },
    {
      "file_path": "src/backend/main.py",
      "code": "import uvicorn\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom .database import Base, engine\nfrom .routers import users\n\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\napp.include_router(users.router)\n\norigins = [\"*\"]  # Update with your allowed origins in production\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)"
    },
    {
      "file_path": "src/backend/database.py",
      "code": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"postgresql://user:password@db:5432/mydatabase\" # Update with your DB connection string\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()"
    },
    {
      "file_path": "src/backend/routers/users.py",
      "code": "from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom ..database import SessionLocal\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@router.get(\"/\")\nasync def read_users(db: Session = Depends(get_db)):\n    # Add your user retrieval logic here\n    return {\"message\": \"Users endpoint\"}"
    },
    {
      "file_path": "src/frontend/src/App.tsx",
      "code": "import React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <h1>My React App</h1>\n    </div>\n  );\n}\n\nexport default App;"
    },
    {
      "file_path": "src/frontend/tailwind.config.js",
      "code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}"
    },
    {
      "file_path": "Dockerfile (backend",
      "code": "FROM python:3.9-slim-buster\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]"
    },
    {
      "file_path": "Dockerfile (frontend",
      "code": "FROM node:16\n\nWORKDIR /app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\nFROM nginx:alpine\n\nCOPY --from=0 /app/build /usr/share/nginx/html\n\nEXPOSE 80"
    },
    {
      "file_path": "docker-compose.yml",
      "code": "version: \"3.9\"\nservices:\n  backend:\n    build: ./src/backend\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n  frontend:\n    build: ./src/frontend\n    ports:\n      - \"3000:80\"\n  db:\n    image: postgres:13\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=mydatabase"
    },
    {
      "file_path": "deploy/kubernetes/backend-deployment.yaml",
      "code": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: backend-image:latest # Replace with your image name\n        ports:\n        - containerPort: 8000"
    },
    {
      "file_path": "deploy/kubernetes/frontend-deployment.yaml",
      "code": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: frontend\n        image: frontend-image:latest # Replace with your image name\n        ports:\n        - containerPort: 80"
    },
    {
      "file_path": "deploy/kubernetes/service.yaml (backend",
      "code": "apiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\nspec:\n  selector:\n    app: backend\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer"
    },
    {
      "file_path": "deploy/kubernetes/service.yaml (frontend",
      "code": "apiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  selector:\n    app: frontend\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer"
    },
    {
      "file_path": "deploy/terraform/main.tf",
      "code": "terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 4.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\" # Replace with your region\n}\n\nresource \"aws_instance\" \"backend\" {\n  ami           = \"ami-0c55b31ad2299a701\" # Replace with your AMI ID\n  instance_type = \"t2.micro\"\n  # ... other configurations ...\n}\n\n# ... other Terraform resources ..."
    },
    {
      "file_path": "src/backend/alembic/versions/initial_migration.py",
      "code": "\"\"\"initial migration\n\nRevision ID: ffdc0a98111c\nRevises:\nCreate Date: 2023-11-20 15:16:02.205042\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'ffdc0a98111c'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n\n\ndef downgrade():\n    op.drop_table('users')"
    },
    {
      "file_path": "src/backend/alembic.ini",
      "code": "[alembic]\nscript_location = ./alembic\nsqlalchemy.url = postgresql://user:password@db:5432/mydatabase # Update with your DB connection string\n\n[post_write_hooks]\n# Add any post-write hooks here"
    }
  ],
  "summary": "Generated 20 architecture files for Layered pattern",
  "status": "success",
  "metadata": {
    "tech_stack": "Default web application stack",
    "architecture_pattern": "Layered",
    "is_revision": false,
    "generation_type": "initial generation",
    "file_count": 20,
    "agent": "Architecture Generator Agent",
    "temperature_used": 0.2,
    "execution_time": 39.192187786102295
  }
}