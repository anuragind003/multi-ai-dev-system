"""Initial database schema creation

Revision ID: ${up_revision}
Revises: ${down_revision}
Create Date: ${create_date}

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy.dialects.postgresql


# revision identifiers, used by Alembic.
revision = '${up_revision}'
down_revision = '${down_revision}'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'customers',
        sa.Column('customer_id', sqlalchemy.dialects.postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('mobile_number', sa.String(length=20), nullable=False),
        sa.Column('pan', sa.String(length=10), nullable=True),
        sa.Column('aadhaar_ref_number', sa.String(length=12), nullable=True),
        sa.Column('ucid', sa.String(length=50), nullable=True),
        sa.Column('previous_loan_app_number', sa.String(length=50), nullable=True),
        sa.Column('customer_attributes', sqlalchemy.dialects.postgresql.JSONB(), nullable=True),
        sa.Column('customer_segment', sa.String(length=10), nullable=True),
        sa.Column('is_dnd', sa.Boolean(), server_default=sa.text('FALSE'), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('customer_id'),
        sa.UniqueConstraint('aadhaar_ref_number'),
        sa.UniqueConstraint('mobile_number'),
        sa.UniqueConstraint('pan'),
        sa.UniqueConstraint('previous_loan_app_number'),
        sa.UniqueConstraint('ucid')
    )
    op.create_table(
        'campaigns',
        sa.Column('campaign_id', sqlalchemy.dialects.postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('campaign_unique_identifier', sa.String(length=100), nullable=False),
        sa.Column('campaign_name', sa.String(length=255), nullable=False),
        sa.Column('campaign_date', sa.Date(), nullable=True),
        sa.Column('targeted_customers_count', sa.Integer(), nullable=True),
        sa.Column('attempted_count', sa.Integer(), nullable=True),
        sa.Column('successfully_sent_count', sa.Integer(), nullable=True),
        sa.Column('failed_count', sa.Integer(), nullable=True),
        sa.Column('success_rate', sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column('conversion_rate', sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('campaign_id'),
        sa.UniqueConstraint('campaign_unique_identifier')
    )
    op.create_table(
        'data_ingestion_logs',
        sa.Column('log_id', sqlalchemy.dialects.postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('file_name', sa.String(length=255), nullable=False),
        sa.Column('upload_timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('error_details', sa.Text(), nullable=True),
        sa.Column('uploaded_by', sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table(
        'offers',
        sa.Column('offer_id', sqlalchemy.dialects.postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('customer_id', sqlalchemy.dialects.postgresql.UUID(), nullable=False),
        sa.Column('offer_type', sa.String(length=20), nullable=True),
        sa.Column('offer_status', sa.String(length=20), nullable=True),
        sa.Column('propensity_flag', sa.String(length=50), nullable=True),
        sa.Column('offer_start_date', sa.Date(), nullable=True),
        sa.Column('offer_end_date', sa.Date(), nullable=True),
        sa.Column('loan_application_number', sa.String(length=50), nullable=True),
        sa.Column('attribution_channel', sa.String(length=50), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.ForeignKeyConstraint(['customer_id'], ['customers.customer_id'], ),
        sa.PrimaryKeyConstraint('offer_id')
    )
    op.create_table(
        'customer_events',
        sa.Column('event_id', sqlalchemy.dialects.postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('customer_id', sqlalchemy.dialects.postgresql.UUID(), nullable=False),
        sa.Column('event_type', sa.String(length=50), nullable=False),
        sa.Column('event_source', sa.String(length=20), nullable=False),
        sa.Column('event_timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('event_details', sqlalchemy.dialects.postgresql.JSONB(), nullable=True),
        sa.ForeignKeyConstraint(['customer_id'], ['customers.customer_id'], ),
        sa.PrimaryKeyConstraint('event_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('customer_events')
    op.drop_table('offers')
    op.drop_table('data_ingestion_logs')
    op.drop_table('campaigns')
    op.drop_table('customers')
    # ### end Alembic commands ###