from marshmallow import Schema, fields, validate
import uuid
from datetime import datetime

# Define allowed values for offer_type, offer_status, source_system, and channel
OFFER_TYPES = ["Fresh", "Enrich", "New-old", "New-new"]
OFFER_STATUSES = ["Active", "Inactive", "Expired"]
SOURCE_SYSTEMS = ["Offermart", "E-aggregator"]
# Channels are not explicitly listed in BRD, but implied by attribution logic.
# Adding common examples. This list can be expanded as needed.
CHANNELS = ["SMS", "Email", "App", "Web", "Call Center", "Direct"]


class OfferSchema(Schema):
    """
    Marshmallow schema for serializing and deserializing Offer data.

    This schema defines the structure and validation rules for offer objects
    when interacting with the API, ensuring data consistency and adherence
    to business requirements.

    Functional Requirements Addressed:
    - FR16: Maintains flags for Offer statuses (Active, Inactive, Expired).
    - FR17: Maintains flags for Offer types (Fresh, Enrich, New-old, New-new).
    - FR19: Maintains analytics-defined flags for Propensity.
    - FR22: Includes 'channel' for attribution logic.
    - FR36: Includes 'loan_application_number' for expiry logic.
    """

    offer_id = fields.UUID(
        dump_only=True,
        metadata={"description": "Unique identifier for the offer (UUID). Generated by the system."}
    )
    customer_id = fields.UUID(
        required=True,
        metadata={"description": "UUID of the associated customer."}
    )
    source_offer_id = fields.String(
        required=True,
        validate=validate.Length(max=100),
        metadata={"description": "Original ID from the source system (e.g., Offermart, E-aggregator)."}
    )
    offer_type = fields.String(
        required=True,
        validate=validate.OneOf(OFFER_TYPES),
        metadata={"description": f"Type of offer. Allowed values: {', '.join(OFFER_TYPES)}."}
    )
    offer_status = fields.String(
        required=True,
        validate=validate.OneOf(OFFER_STATUSES),
        metadata={"description": f"Current status of the offer. Allowed values: {', '.join(OFFER_STATUSES)}."}
    )
    propensity = fields.String(
        validate=validate.Length(max=50),
        allow_none=True,
        metadata={"description": "Analytics-defined propensity flag, passed from Offermart."}
    )
    loan_application_number = fields.String(
        validate=validate.Length(max=100),
        allow_none=True,
        metadata={"description": "Loan Application Number (LAN) if a journey has started for this offer."}
    )
    valid_until = fields.DateTime(
        required=True,
        metadata={"description": "Timestamp indicating when the offer expires."}
    )
    source_system = fields.String(
        required=True,
        validate=validate.OneOf(SOURCE_SYSTEMS),
        metadata={"description": f"Source system from which the offer originated. Allowed values: {', '.join(SOURCE_SYSTEMS)}."}
    )
    channel = fields.String(
        validate=validate.OneOf(CHANNELS),
        allow_none=True,
        metadata={"description": f"Channel through which the offer was made. Allowed values: {', '.join(CHANNELS)}."}
    )
    is_duplicate = fields.Boolean(
        load_default=False,
        allow_none=True,
        metadata={"description": "Flag indicating if this offer has been identified as a duplicate by the deduplication process."}
    )
    original_offer_id = fields.UUID(
        allow_none=True,
        metadata={"description": "UUID of the original offer that this offer duplicated or enriched (if applicable)."}
    )
    created_at = fields.DateTime(
        dump_only=True,
        metadata={"description": "Timestamp when the offer record was created in the CDP."}
    )
    updated_at = fields.DateTime(
        dump_only=True,
        metadata={"description": "Timestamp when the offer record was last updated in the CDP."}
    )


class OfferHistorySchema(Schema):
    """
    Marshmallow schema for serializing OfferHistory data.

    This schema defines the structure for historical records of offer status changes.

    Functional Requirements Addressed:
    - FR20: Supports maintaining offer history.
    """

    history_id = fields.UUID(
        dump_only=True,
        metadata={"description": "Unique identifier for the offer history record (UUID). Generated by the system."}
    )
    offer_id = fields.UUID(
        required=True,
        metadata={"description": "UUID of the offer to which this history record pertains."}
    )
    status_change_date = fields.DateTime(
        dump_only=True,
        metadata={"description": "Timestamp when the offer status change occurred."}
    )
    old_status = fields.String(
        required=True,
        validate=validate.OneOf(OFFER_STATUSES),
        metadata={"description": f"The previous status of the offer. Allowed values: {', '.join(OFFER_STATUSES)}."}
    )
    new_status = fields.String(
        required=True,
        validate=validate.OneOf(OFFER_STATUSES),
        metadata={"description": f"The new status of the offer. Allowed values: {', '.join(OFFER_STATUSES)}."}
    )
    change_reason = fields.String(
        allow_none=True,
        metadata={"description": "Optional reason or context for the status change."}
    )