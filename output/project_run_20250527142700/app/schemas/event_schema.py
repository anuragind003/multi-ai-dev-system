from marshmallow import Schema, fields, validate, post_load, ValidationError
from datetime import datetime
import uuid

# Define allowed event types and sources based on FR22 and system design
ALLOWED_EVENT_TYPES = [
    "SMS_SENT",
    "SMS_DELIVERED",
    "SMS_CLICK",
    "CONVERSION",
    "APP_STAGE_LOGIN",
    "APP_STAGE_BUREAU_CHECK",
    "APP_STAGE_OFFER_DETAILS",
    "APP_STAGE_EKYC",
    "APP_STAGE_BANK_DETAILS",
    "APP_STAGE_OTHER_DETAILS",
    "APP_STAGE_E_SIGN",
]

ALLOWED_EVENT_SOURCES = ["Moengage", "LOS"]

# --- Schemas for event_details (JSONB field) ---

class MoengageEventDetailsSchema(Schema):
    """
    Schema for event_details when event_source is 'Moengage' and event_type is SMS related.
    """
    sms_campaign_id = fields.String(required=False, allow_none=True, metadata={"description": "Campaign ID from Moengage"})
    message_id = fields.String(required=False, allow_none=True, metadata={"description": "Unique message ID from Moengage"})
    status_code = fields.String(required=False, allow_none=True, metadata={"description": "Status code from Moengage (e.g., '200', '400')"})
    status_description = fields.String(required=False, allow_none=True, metadata={"description": "Description of the SMS status"})

class ConversionEventDetailsSchema(Schema):
    """
    Schema for event_details when event_type is 'CONVERSION'.
    """
    conversion_value = fields.Float(required=False, allow_none=True, metadata={"description": "Monetary value of conversion"})
    conversion_currency = fields.String(required=False, allow_none=True, metadata={"description": "Currency of conversion value"})
    loan_application_number = fields.String(required=False, allow_none=True, metadata={"description": "Loan Application Number associated with conversion"})
    conversion_details = fields.Dict(required=False, allow_none=True, metadata={"description": "Additional conversion details as a dictionary"})

class ApplicationStageEventDetailsSchema(Schema):
    """
    Schema for event_details when event_type is an 'APP_STAGE_' type.
    This schema represents the structured JSONB content for application stages.
    """
    loan_application_number = fields.String(required=True, metadata={"description": "Loan Application Number for the stage"})
    stage_status = fields.String(
        required=False,
        allow_none=True,
        validate=validate.OneOf(["STARTED", "COMPLETED", "FAILED", "PENDING", "IN_PROGRESS"]),
        metadata={"description": "Status of the application stage"}
    )
    error_message = fields.String(required=False, allow_none=True, metadata={"description": "Error message if stage failed"})
    additional_info = fields.Dict(required=False, allow_none=True, metadata={"description": "Any additional information for the stage"})


# --- Main Event Schema ---

class EventSchema(Schema):
    """
    Schema for validating and serializing Customer Event data.
    Corresponds to the 'customer_events' table in the database.
    """
    event_id = fields.UUID(dump_only=True, metadata={"description": "Unique identifier for the event, generated by DB"})
    customer_id = fields.UUID(required=True, metadata={"description": "UUID of the customer associated with the event"})
    event_type = fields.String(
        required=True,
        validate=validate.OneOf(ALLOWED_EVENT_TYPES),
        metadata={"description": "Type of event (e.g., SMS_SENT, CONVERSION, APP_STAGE_LOGIN)"}
    )
    event_source = fields.String(
        required=True,
        validate=validate.OneOf(ALLOWED_EVENT_SOURCES),
        metadata={"description": "Source of the event (e.g., Moengage, LOS)"}
    )
    event_timestamp = fields.DateTime(
        required=False,
        load_default=datetime.utcnow,  # Default to current UTC time on load if not provided
        dump_default=datetime.utcnow,  # Default to current UTC time on dump if not provided
        metadata={"description": "Timestamp when the event occurred"}
    )
    event_details = fields.Raw(
        required=False,
        allow_none=True,
        metadata={"description": "JSONB field for specific event details, structure depends on event_type/source"}
    )

    @post_load
    def validate_and_process_event_details(self, data, **kwargs):
        """
        Validates and processes the 'event_details' field based on 'event_type' and 'event_source'.
        This ensures the JSONB content conforms to expected structures.
        """
        event_type = data.get("event_type")
        event_source = data.get("event_source")
        event_details = data.get("event_details")

        if event_details is None:
            return data  # No details to validate, allow None

        if not isinstance(event_details, dict):
            raise ValidationError(
                "event_details must be a dictionary.",
                field_name="event_details"
            )

        # Determine which sub-schema to use for validation
        detail_schema = None
        if event_source == "Moengage" and event_type.startswith("SMS_"):
            detail_schema = MoengageEventDetailsSchema()
        elif event_type == "CONVERSION":
            detail_schema = ConversionEventDetailsSchema()
        elif event_type.startswith("APP_STAGE_"):
            detail_schema = ApplicationStageEventDetailsSchema()

        if detail_schema:
            try:
                # Validate the event_details against the determined schema
                # partial=False means all required fields of the sub-schema must be present
                validated_details = detail_schema.load(event_details, partial=False)
                data["event_details"] = validated_details
            except ValidationError as e:
                # Re-raise with a more specific error message for event_details
                raise ValidationError(
                    f"Invalid 'event_details' for event_type '{event_type}' and source '{event_source}': {e.messages}",
                    field_name="event_details"
                )
        # If no specific schema is defined for the given event_type/source,
        # we've already ensured it's a dictionary, so no further validation needed here.
        return data

# Instantiate schemas for use in routes/services
event_schema = EventSchema()
events_schema = EventSchema(many=True)