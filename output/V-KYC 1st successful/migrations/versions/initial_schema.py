# migrations/versions/initial_schema.py
# Alembic migration script to create the initial database schema.
# This script is generated by Alembic and modified to include all tables.

"""initial_schema

Revision ID: 001_initial_schema
Revises: 
Create Date: 2023-10-27 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001_initial_schema'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Enable UUID generation extension
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')

    # Create 'users' table
    op.create_table(
        'users',
        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, server_default=sa.text('uuid_generate_v4()')),
        sa.Column('username', sa.String(255), unique=True, nullable=False),
        sa.Column('password_hash', sa.String(255), nullable=False),
        sa.Column('email', sa.String(255), unique=True, nullable=False),
        sa.Column('role', sa.String(50), nullable=False, server_default='user'),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.CheckConstraint("email ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$'", name='chk_email_format'),
        sa.CheckConstraint("role IN ('admin', 'agent', 'user', 'auditor')", name='chk_user_role')
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)

    # Add trigger for 'updated_at' column on 'users' table
    op.execute("""
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = CURRENT_TIMESTAMP;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)
    op.execute("""
        CREATE TRIGGER set_users_updated_at
        BEFORE UPDATE ON users
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
    """)

    # Create 'vkyc_recordings' table
    op.create_table(
        'vkyc_recordings',
        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, server_default=sa.text('uuid_generate_v4()')),
        sa.Column('customer_id', sa.String(255), nullable=False),
        sa.Column('recording_date', sa.Date, nullable=False),
        sa.Column('recording_time', sa.Time, nullable=False),
        sa.Column('status', sa.String(50), nullable=False),
        sa.Column('file_path', sa.Text, nullable=False),
        sa.Column('duration_seconds', sa.Integer),
        sa.Column('agent_id', sa.String(255)),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.CheckConstraint("status IN ('pending', 'completed', 'failed', 'reviewed', 'cancelled')", name='chk_recording_status'),
        sa.CheckConstraint("duration_seconds >= 0", name='chk_duration_positive')
    )
    op.create_index('ix_vkyc_recordings_customer_id', 'vkyc_recordings', ['customer_id'])
    op.create_index('ix_vkyc_recordings_status', 'vkyc_recordings', ['status'])
    op.create_index('ix_vkyc_recordings_date_time', 'vkyc_recordings', ['recording_date', 'recording_time'])


    # Create 'audit_logs' table
    op.create_table(
        'audit_logs',
        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, server_default=sa.text('uuid_generate_v4()')),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), sa.ForeignKey('users.id', ondelete='CASCADE'), nullable=False),
        sa.Column('action', sa.String(255), nullable=False),
        sa.Column('resource_type', sa.String(255)),
        sa.Column('resource_id', postgresql.UUID(as_uuid=True)),
        sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.Column('ip_address', postgresql.INET)
    )
    op.create_index('ix_audit_logs_user_id', 'audit_logs', ['user_id'])
    op.create_index('ix_audit_logs_timestamp', 'audit_logs', ['timestamp'])
    op.create_index('ix_audit_logs_action', 'audit_logs', ['action'])

    # Add function for logging audit events
    op.execute("""
        CREATE OR REPLACE FUNCTION log_audit_event_func(
            p_user_id UUID,
            p_action VARCHAR,
            p_resource_type VARCHAR DEFAULT NULL,
            p_resource_id UUID DEFAULT NULL,
            p_ip_address INET DEFAULT NULL
        )
        RETURNS VOID AS $$
        BEGIN
            INSERT INTO audit_logs (user_id, action, resource_type, resource_id, ip_address)
            VALUES (p_user_id, p_action, p_resource_type, p_resource_id, p_ip_address);
        END;
        $$ LANGUAGE plpgsql;
    """)


def downgrade():
    # Drop function for logging audit events
    op.execute('DROP FUNCTION IF EXISTS log_audit_event_func(UUID, VARCHAR, VARCHAR, UUID, INET);')

    # Drop 'audit_logs' table
    op.drop_table('audit_logs')

    # Drop indexes for 'vkyc_recordings'
    op.drop_index('ix_vkyc_recordings_date_time', table_name='vkyc_recordings')
    op.drop_index('ix_vkyc_recordings_status', table_name='vkyc_recordings')
    op.drop_index('ix_vkyc_recordings_customer_id', table_name='vkyc_recordings')
    # Drop 'vkyc_recordings' table
    op.drop_table('vkyc_recordings')

    # Drop trigger and function for 'updated_at' column on 'users' table
    op.execute('DROP TRIGGER IF EXISTS set_users_updated_at ON users;')
    op.execute('DROP FUNCTION IF EXISTS update_updated_at_column();')

    # Drop indexes for 'users'
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    # Drop 'users' table
    op.drop_table('users')

    # Drop UUID generation extension if no other objects depend on it
    # This might be problematic if other parts of the system use it,
    # so often extensions are left unless explicitly required to remove.
    # For a clean downgrade, we'll include it.
    op.execute('DROP EXTENSION IF EXISTS "uuid-ossp";')