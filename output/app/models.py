import uuid
from flask_sqlalchemy import SQLAlchemy

# Initialize SQLAlchemy. This 'db' object will be initialized with the Flask app later
# in the application's main file (e.g., app.py or __init__.py).
db = SQLAlchemy()

class Product(db.Model):
    """
    Represents a product in the inventory system.
    Maps to the 'products' table in the database.
    """
    __tablename__ = 'products'

    id = db.Column(db.Text, primary_key=True, default=lambda: str(uuid.uuid4()))
    name = db.Column(db.Text, nullable=False)
    description = db.Column(db.Text, nullable=True) # Optional as per FR1
    price = db.Column(db.Float, nullable=False)
    stock_quantity = db.Column(db.Integer, nullable=False)

    def __init__(self, name, price, stock_quantity, description=None):
        """
        Initializes a new Product instance.
        ID is automatically generated by the default value of the column.
        """
        self.name = name
        self.description = description
        self.price = price
        self.stock_quantity = stock_quantity

    def __repr__(self):
        """
        Provides a string representation of the Product object for debugging.
        """
        return f'<Product {self.id}: {self.name}>'

    def to_dict(self):
        """
        Converts the Product object to a dictionary, suitable for JSON serialization
        in API responses.
        """
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'price': self.price,
            'stock_quantity': self.stock_quantity
        }

    @classmethod
    def from_dict(cls, data):
        """
        Creates a new Product instance from a dictionary (e.g., from a request body).
        This method is useful for creating new products.
        """
        return cls(
            name=data.get('name'),
            description=data.get('description'),
            price=data.get('price'),
            stock_quantity=data.get('stock_quantity')
        )

    def update_from_dict(self, data):
        """
        Updates the current Product instance with data from a dictionary,
        supporting partial updates. Only provided fields will be updated.
        """
        if 'name' in data:
            self.name = data['name']
        if 'description' in data:
            self.description = data['description']
        if 'price' in data:
            self.price = data['price']
        if 'stock_quantity' in data:
            self.stock_quantity = data['stock_quantity']