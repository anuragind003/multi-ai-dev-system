name: FastAPI CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

env:
  DOCKER_IMAGE_NAME: fastapi-app
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }} # GitHub Container Registry

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Linting (Flake8)
        run: flake8 app/ tests/

      - name: Run Code Formatting Check (Black)
        run: black --check app/ tests/

      - name: Run Unit Tests
        run: pytest tests/unit/ --cov=app --cov-report=xml --cov-report=term-missing

      - name: Run Integration Tests
        run: pytest tests/integration/

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '1' # Fail if vulnerabilities are found
          severity: 'CRITICAL,HIGH'

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  performance_test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Start FastAPI app in background
        run: |
          docker run -d --name fastapi_test_app -p 8000:8000 ${{ env.DOCKER_IMAGE_NAME }}:latest
          sleep 10 # Give the app time to start

      - name: Run Performance Tests (Locust)
        run: locust -f tests/performance/locustfile.py --host http://localhost:8000 --users 10 --spawn-rate 2 --run-time 30s --headless

      - name: Stop and remove FastAPI app container
        if: always()
        run: docker rm -f fastapi_test_app

  deploy:
    runs-on: ubuntu-latest
    needs: [build, performance_test] # Ensure tests pass before deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main
    environment: production # Define a production environment for secrets/approvals
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host key (for known_hosts)
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.PROD_SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_IP }} "
            cd /opt/fastapi-app &&
            git pull origin main &&
            docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} &&
            docker-compose -f docker-compose.prod.yml pull &&
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans &&
            docker system prune -f
          "
      - name: Verify Deployment
        run: |
          sleep 10 # Give services time to start
          curl -f http://${{ secrets.PROD_SERVER_IP }}/health || (echo "Health check failed!" && exit 1)