name: FastAPI ELK CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run Linters (Black, isort, Flake8)
        run: |
          poetry run black --check .
          poetry run isort --check-only .
          poetry run flake8 .

      - name: Run Type Checker (Mypy)
        run: poetry run mypy app/

      - name: Run Unit and Integration Tests
        run: poetry run pytest --cov=app --cov-report=xml --cov-report=term-missing tests/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Ensure this secret is set in your repo
          file: ./coverage.xml
          flags: unittests
          name: codecov-fastapi-elk

      - name: Build Docker Image
        run: docker build -t fastapi-elk-app:latest .

      - name: Run Security Scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fastapi-elk-app:latest'
          format: 'table'
          exit-code: '1' # Fail if vulnerabilities are found
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true # Only report fixed vulnerabilities

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' # Deploy only from main branch
    runs-on: ubuntu-latest
    environment: production # Use GitHub Environments for production deployments
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi-elk-app:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-elk-app:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/fastapi-elk-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/fastapi-elk-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-elk-app:latest

      - name: Deploy to Production (SSH)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/fastapi-elk-app # Or your deployment directory
            # Pull the latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-elk-app:latest
            # Stop existing containers (if any)
            docker-compose down || true
            # Update .env file with production secrets (if applicable, or use Docker secrets)
            # echo "API_KEY=${{ secrets.PROD_API_KEY }}" > .env
            # Start new containers
            docker-compose up -d --build
            # Clean up old images
            docker system prune -f
            echo "Deployment complete for ${{ github.sha }}"

      - name: Run Performance Tests (Locust) - Post-deployment
        run: |
          # This would typically run from a separate machine or a dedicated test environment
          # For simplicity, we'll just show the command.
          # You'd need to ensure Locust can reach the deployed app.
          # Example: docker run --network host locustio/locust -f /path/to/locustfile.py --host http://<PROD_APP_IP>:8000 --users 10 --spawn-rate 2 --run-time 30s --headless
          echo "Triggering performance tests (manual or external service)"
          # Example: curl -X POST https://your-load-testing-service.com/trigger-test