# Input for receiving logs from the FastAPI application via TCP
input {
  tcp {
    port => 5000
    codec => json_lines # Expects JSON lines from the application
    type => "fastapi_logs" # Tag for this input source
  }
}

# Filter for processing logs
filter {
  if [type] == "fastapi_logs" {
    # Add a timestamp if not present (Loguru adds it, but good practice)
    if ![log_timestamp] {
      mutate {
        add_field => { "log_timestamp" => "%{+YYYY-MM-dd'T'HH:mm:ss.SSSZ}" }
      }
    }
    # Rename Loguru's 'message' field to 'log_message' to avoid conflicts
    # and ensure 'message' is the main log content for Kibana.
    if [message] {
      mutate {
        rename => { "message" => "log_message" }
      }
    }
    # Add application specific fields
    mutate {
      add_field => {
        "application" => "fastapi-elk-app"
        "environment" => "${APP_ENV}" # This will be populated from Logstash's environment
      }
    }
    # Parse JSON fields if they are nested strings (e.g., if Loguru's serialize=True isn't enough)
    # This might not be needed if Loguru sends proper JSON directly.
    # json {
    #   source => "log_message"
    #   target => "parsed_log"
    #   remove_field => ["log_message"]
    # }

    # Example: Extracting fields from log_message if it's a string
    # grok {
    #   match => { "log_message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message_content}" }
    #   remove_field => ["log_message"]
    # }

    # Set the @timestamp field for Elasticsearch
    date {
      match => [ "time", "ISO8601" ] # Loguru's default timestamp field is 'time'
      target => "@timestamp"
      remove_field => ["time"]
    }

    # If Loguru's 'level' field exists, map it to Logstash's 'loglevel'
    if [level] {
      mutate {
        rename => { "level" => "loglevel" }
      }
    }
  }
}

# Output to Elasticsearch
output {
  elasticsearch {
    hosts => ["elasticsearch:9200"] # Connect to Elasticsearch service
    index => "fastapi-logs-%{+YYYY.MM.dd}" # Daily index for logs
    # user => "elastic" # Enable if X-Pack security is enabled
    # password => "changeme" # Enable if X-Pack security is enabled
  }
  # For debugging, output to stdout
  stdout { codec => rubydebug }
}