package com.ltfs.cdp.customer.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Represents the core customer profile data within the LTFS Offer CDP system.
 * This entity is central to providing a single, unified view of the customer
 * for Consumer Loan Products, enabling deduplication and efficient management
 * of customer information.
 *
 * It includes fields for personal identification, contact details, address,
 * and specific attributes related to the deduplication process and source tracking.
 *
 * This entity leverages Lombok for boilerplate code (getters, setters, constructors, builder)
 * and Spring Data JPA for persistence and auditing capabilities.
 */
@Entity
@Table(name = "customers", uniqueConstraints = {
        @UniqueConstraint(name = "uk_customer_cdp_id", columnNames = {"customer_cdp_id"}),
        // Note: For PAN, Aadhaar, Mobile, Email, unique constraint applies only to non-null values.
        // Multiple customers can have NULL for these fields.
        @UniqueConstraint(name = "uk_pan", columnNames = {"pan"}),
        @UniqueConstraint(name = "uk_aadhaar", columnNames = {"aadhaar"}),
        @UniqueConstraint(name = "uk_mobile_number", columnNames = {"mobile_number"}),
        @UniqueConstraint(name = "uk_email_id", columnNames = {"email_id"})
})
@Data // Lombok: Generates getters, setters, toString, equals, and hashCode methods
@NoArgsConstructor // Lombok: Generates a no-argument constructor
@AllArgsConstructor // Lombok: Generates a constructor with all fields as arguments
@Builder // Lombok: Provides a builder pattern for object creation
@EntityListeners(AuditingEntityListener.class) // Enables JPA auditing for created/modified dates/users
public class Customer {

    /**
     * Unique identifier for the customer record in the database.
     * This is a surrogate primary key, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    /**
     * The unique Customer Data Platform (CDP) identifier for the customer.
     * This serves as a business key for the customer profile within the CDP system,
     * especially after deduplication. It's a UUID to ensure global uniqueness.
     * Automatically generated upon creation if not provided.
     */
    @Column(name = "customer_cdp_id", nullable = false, updatable = false, columnDefinition = "UUID")
    private UUID customerCdpId;

    /**
     * First name of the customer.
     * Required field.
     */
    @Column(name = "first_name", nullable = false, length = 100)
    private String firstName;

    /**
     * Middle name of the customer. Can be null.
     */
    @Column(name = "middle_name", length = 100)
    private String middleName;

    /**
     * Last name of the customer.
     * Required field.
     */
    @Column(name = "last_name", nullable = false, length = 100)
    private String lastName;

    /**
     * Date of birth of the customer.
     * Required field.
     */
    @Column(name = "date_of_birth", nullable = false)
    private LocalDate dateOfBirth;

    /**
     * Gender of the customer (e.g., "MALE", "FEMALE", "OTHER").
     */
    @Column(name = "gender", length = 10)
    private String gender;

    /**
     * Permanent Account Number (PAN) of the customer.
     * Unique constraint applied to non-null values.
     */
    @Column(name = "pan", length = 10) // PAN is typically 10 alphanumeric characters
    private String pan;

    /**
     * Aadhaar number of the customer.
     * Unique constraint applied to non-null values.
     */
    @Column(name = "aadhaar", length = 12) // Aadhaar is typically 12 digits
    private String aadhaar;

    /**
     * Mobile number of the customer.
     * Unique constraint applied to non-null values.
     */
    @Column(name = "mobile_number", length = 15)
    private String mobileNumber;

    /**
     * Email ID of the customer.
     * Unique constraint applied to non-null values.
     */
    @Column(name = "email_id", length = 255)
    private String emailId;

    /**
     * First line of the customer's address.
     */
    @Column(name = "address_line1", length = 255)
    private String addressLine1;

    /**
     * Second line of the customer's address. Can be null.
     */
    @Column(name = "address_line2", length = 255)
    private String addressLine2;

    /**
     * City of the customer's address.
     */
    @Column(name = "city", length = 100)
    private String city;

    /**
     * State of the customer's address.
     */
    @Column(name = "state", length = 100)
    private String state;

    /**
     * Pincode/Zip code of the customer's address.
     */
    @Column(name = "pincode", length = 10)
    private String pincode;

    /**
     * Identifier from the Customer 360 system, if this customer record
     * has been successfully deduped against or linked to the master 360 profile.
     * Can be null if not yet linked or if the customer is new to 360.
     */
    @Column(name = "customer_360_id", length = 50)
    private String customer360Id;

    /**
     * Status of the customer record regarding deduplication.
     * Examples: "ORIGINAL", "DEDUPED", "PENDING_DEDUPE", "REJECTED".
     * This field helps manage the lifecycle of customer records during the deduplication process.
     * Required field.
     */
    @Column(name = "dedupe_status", nullable = false, length = 20)
    private String dedupeStatus;

    /**
     * If this customer record was deduped, this field stores the `customerCdpId`
     * of the master customer record it was merged into.
     * Null if this is the master record or not yet deduped.
     */
    @Column(name = "deduped_to_cdp_id", columnDefinition = "UUID")
    private UUID dedupedToCdpId;

    /**
     * The source system from which this customer data originated.
     * Examples: "OFFERMART", "E_AGGREGATOR", "LOYALTY", "PREAPPROVED".
     * Crucial for tracking data lineage and applying source-specific dedupe rules.
     * Required field.
     */
    @Column(name = "source_system", nullable = false, length = 50)
    private String sourceSystem;

    /**
     * Timestamp when the customer record was created.
     * Automatically populated by JPA Auditing.
     * Required field.
     */
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    /**
     * User or system that created the customer record.
     * Automatically populated by JPA Auditing.
     * Required field.
     */
    @CreatedBy
    @Column(name = "created_by", nullable = false, updatable = false, length = 50)
    private String createdBy;

    /**
     * Timestamp when the customer record was last updated.
     * Automatically populated by JPA Auditing.
     */
    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    /**
     * User or system that last updated the customer record.
     * Automatically populated by JPA Auditing.
     */
    @LastModifiedBy
    @Column(name = "updated_by", length = 50)
    private String updatedBy;

    /**
     * PrePersist method to generate customerCdpId and set initial dedupe status
     * before the entity is saved for the first time.
     * This ensures that every new Customer entity gets a unique CDP ID and a default status.
     */
    @PrePersist
    protected void onCreate() {
        // Generate a new UUID for customerCdpId if it's not already set
        if (this.customerCdpId == null) {
            this.customerCdpId = UUID.randomUUID();
        }
        // Set initial dedupe status to PENDING_DEDUPE if not explicitly provided
        if (this.dedupeStatus == null) {
            this.dedupeStatus = "PENDING_DEDUPE";
        }
    }
}