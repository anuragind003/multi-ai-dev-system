apiVersion: apps/v1
kind: Deployment
metadata:
  name: integration-service
  labels:
    app: integration-service
    tier: backend
    service: integration
spec:
  replicas: 2 # Number of desired pod replicas for high availability and scalability
  selector:
    matchLabels:
      app: integration-service
  template:
    metadata:
      labels:
        app: integration-service
        tier: backend
        service: integration
    spec:
      # Define image pull secrets if using a private Docker registry
      # imagePullSecrets:
      #   - name: regcred
      containers:
      - name: integration-service
        # Replace with the actual Docker image for the Integration Service
        # Example: your-registry/ltfs-offer-cdp/integration-service:1.0.0
        image: ltfs-offer-cdp/integration-service:1.0.0
        ports:
        - containerPort: 8080 # Default Spring Boot application port
          name: http
        env:
          # Spring Boot profile for Kubernetes environment
          - name: SPRING_PROFILES_ACTIVE
            value: kubernetes
          # Database connection details for PostgreSQL
          # Assumes a Kubernetes Service named 'postgresql-service' for the database
          - name: SPRING_DATASOURCE_URL
            value: jdbc:postgresql://postgresql-service:5432/cdp_db
          # Database username sourced from a Kubernetes Secret
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: cdp-db-credentials # Name of the Kubernetes Secret
                key: username           # Key within the secret for the username
          # Database password sourced from a Kubernetes Secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cdp-db-credentials # Name of the Kubernetes Secret
                key: password           # Key within the secret for the password
          # Kafka connection details for event-driven components
          # Assumes a Kubernetes Service named 'kafka-broker-service' for Kafka
          - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
            value: kafka-broker-service:9092
          # Example of another application-specific environment variable
          - name: APPLICATION_LOG_LEVEL
            value: INFO
        resources:
          # Resource requests ensure the scheduler allocates sufficient resources
          requests:
            memory: "512Mi"
            cpu: "500m" # 0.5 CPU core
          # Resource limits prevent the container from consuming too many resources
          limits:
            memory: "1024Mi"
            cpu: "1000m" # 1 CPU core
        # Liveness probe to check if the application is running and healthy
        # If this probe fails, Kubernetes will restart the container
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness # Spring Boot Actuator liveness endpoint
            port: 8080
          initialDelaySeconds: 60 # Give the application time to start up
          periodSeconds: 10     # Check every 10 seconds
          timeoutSeconds: 5     # Timeout after 5 seconds
          failureThreshold: 3   # After 3 failures, restart the container
        # Readiness probe to check if the application is ready to serve traffic
        # If this probe fails, Kubernetes will stop sending traffic to the pod
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness # Spring Boot Actuator readiness endpoint
            port: 8080
          initialDelaySeconds: 30 # Give the application time to initialize
          periodSeconds: 10     # Check every 10 seconds
          timeoutSeconds: 5     # Timeout after 5 seconds
          failureThreshold: 3   # After 3 failures, mark as unready
        # Security context for hardening the container
        securityContext:
          allowPrivilegeEscalation: false # Prevent privilege escalation
          readOnlyRootFilesystem: true    # Make the root filesystem read-only
          runAsNonRoot: true              # Run the container as a non-root user
          capabilities:
            drop:
              - ALL # Drop all Linux capabilities for enhanced security
---
apiVersion: v1
kind: Service
metadata:
  name: integration-service # Name of the Kubernetes Service
  labels:
    app: integration-service
    tier: backend
    service: integration
spec:
  selector:
    app: integration-service # Selects pods with this label to route traffic to
  ports:
    - protocol: TCP
      port: 80             # The port on which the service will be exposed within the cluster
      targetPort: 8080     # The port on the container to which traffic will be forwarded
      name: http
  type: ClusterIP # Exposes the service on an internal IP in the cluster.
                  # This is suitable for internal microservice communication.
                  # Use LoadBalancer or NodePort for external exposure if needed.