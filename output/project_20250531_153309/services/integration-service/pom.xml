<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Inherit from Spring Boot Starter Parent for dependency management, plugin configuration, and sensible defaults -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version> <!-- Specify a stable and recent Spring Boot 3.x version -->
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.ltfs.cdp</groupId>
    <artifactId>integration-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>integration-service</name>
    <description>Integration Service for LTFS Offer CDP - Responsible for ingesting, validating, and orchestrating customer and offer data, including deduplication logic.</description>
    <packaging>jar</packaging>

    <properties>
        <java.version>17</java.version> <!-- Target Java version for the project -->
        <spring-cloud.version>2023.0.1</spring-cloud.version> <!-- Spring Cloud BOM version for consistent Spring Cloud component versions -->
        <lombok.version>1.18.30</lombok.version> <!-- Explicit Lombok version for annotation processor path -->
        <springdoc-openapi.version>2.5.0</springdoc-openapi.version> <!-- Version for OpenAPI/Swagger UI documentation -->
    </properties>

    <dependencies>
        <!-- Spring Boot Web Starter: Provides embedded Tomcat and Spring MVC for building RESTful APIs -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Data JPA Starter: For persistence layer using JPA and Hibernate, interacting with the database -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Spring Boot Validation Starter: Enables declarative data validation using Jakarta Bean Validation annotations -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Spring Boot Actuator: Provides production-ready features like monitoring, health checks, and metrics -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- PostgreSQL JDBC Driver: The official JDBC driver for PostgreSQL database connectivity -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope> <!-- This dependency is only needed at runtime -->
        </dependency>

        <!-- Spring Kafka: Provides abstractions for building event-driven applications with Apache Kafka -->
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>

        <!-- Lombok: A library that reduces boilerplate code for Java classes (e.g., getters, setters, constructors) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional> <!-- This dependency is optional and not transitive -->
        </dependency>

        <!-- Spring Boot DevTools: Provides development-time features like automatic application restarts on code changes -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- SpringDoc OpenAPI UI: Generates OpenAPI 3 specifications and provides a Swagger UI for API documentation -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc-openapi.version}</version>
        </dependency>

        <!-- Spring Boot Test Starter: Provides core utilities for testing Spring Boot applications (JUnit, Mockito, Spring Test) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope> <!-- This dependency is only used during test compilation and execution -->
        </dependency>

        <!-- Spring Kafka Test: Provides utilities for testing Kafka-based applications, including embedded Kafka brokers -->
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Optional: Spring Cloud Netflix Eureka Client for Service Discovery -->
        <!-- Uncomment this dependency if this service needs to register itself with a Eureka server
             or discover other services registered with Eureka. -->
        <!--
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        -->
    </dependencies>

    <!-- Dependency Management for Spring Cloud: Ensures consistent versions for all Spring Cloud components -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin: Creates an executable JAR and manages the application lifecycle -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- Exclude Lombok from the final JAR if not strictly necessary, though often included -->
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Maven Compiler Plugin: Configures the Java compiler to use the specified Java version -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <!-- Configure annotation processors, essential for Lombok to generate code during compilation -->
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <!-- Add other annotation processors here if used (e.g., MapStruct, QueryDSL) -->
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <!-- Maven Surefire Plugin: Configures and runs unit tests during the build lifecycle -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>false</skipTests> <!-- Set to true to skip tests during the build process (e.g., for faster local builds) -->
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>