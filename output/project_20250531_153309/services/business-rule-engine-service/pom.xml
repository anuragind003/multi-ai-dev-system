<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Parent POM for Spring Boot applications.
	     It provides dependency management and plugin configuration,
	     ensuring consistent versions for Spring Boot dependencies. -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version> <!-- Using a recent stable Spring Boot version -->
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.ltfs.cdp.offer</groupId>
	<artifactId>business-rule-engine-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>business-rule-engine-service</name>
	<description>Microservice responsible for applying business rules for LTFS Offer CDP, including deduplication and validation logic.</description>

	<properties>
		<java.version>17</java.version> <!-- Standard Java version for modern Spring Boot applications -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<drools.version>8.44.0.Final</drools.version> <!-- Specify a compatible Drools version for the rule engine -->
	</properties>

	<dependencies>
		<!-- Spring Boot Starter for building web, including RESTful, applications.
		     Essential for exposing API endpoints for rule execution. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Spring Boot Starter for using Spring Data JPA with Hibernate.
		     Likely needed for interacting with customer/offer data from the database
		     to apply rules, even if rules themselves are not persisted via JPA. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- PostgreSQL JDBC Driver. Required for connecting to the PostgreSQL database. -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope> <!-- Runtime scope as it's only needed at runtime -->
		</dependency>

		<!-- Spring Boot Starter for validation using Hibernate Validator.
		     Used for basic column-level validation on incoming data. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Spring Boot Starter for monitoring and managing the application with HTTP endpoints.
		     Provides health checks, metrics, and other operational insights. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Spring Kafka for building event-driven microservices with Apache Kafka.
		     Enables consumption of events (e.g., new offer data) and production of
		     processed events (e.g., deduped offers). -->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<!-- Lombok for reducing boilerplate code (e.g., getters, setters, constructors, equals, hashCode).
		     Improves code readability and maintainability. -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional> <!-- Optional dependency, not transitive -->
		</dependency>

		<!-- Drools Core: The core engine for rule execution.
		     Provides the runtime environment for DRL (Drools Rule Language) rules. -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-core</artifactId>
			<version>${drools.version}</version>
		</dependency>
		<!-- Drools Compiler: Required for compiling DRL files into executable rule bases. -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-compiler</artifactId>
			<version>${drools.version}</version>
		</dependency>
		<!-- Drools Decision Tables: For loading rules from external sources like spreadsheets (e.g., Excel).
		     Useful for managing complex business rules externally. -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-decisiontables</artifactId>
			<version>${drools.version}</version>
		</dependency>

		<!-- Spring Boot DevTools for fast application restarts, LiveReload, and more.
		     Enhances developer productivity during local development. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Starter for testing Spring Boot applications, including JUnit, Mockito, etc.
		     Essential for writing unit and integration tests. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Spring Kafka Test for testing Kafka-based applications.
		     Provides utilities for embedded Kafka brokers for integration tests. -->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Spring Boot Maven Plugin to create an executable jar.
			     It also repackages the JAR to make it runnable and includes all dependencies. -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<!-- Exclude Lombok from the final JAR if it's only used for compilation,
					     though typically it's fine to include. This is a common practice. -->
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<!-- Maven Compiler Plugin to ensure correct Java version compilation.
			     Configures source and target compatibility for the project. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<!-- Configure annotation processor paths for Lombok to ensure it runs during compilation. -->
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<!-- Version is managed by the parent POM, so no explicit version needed here. -->
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>