apiVersion: v1
kind: Service
metadata:
  name: reporting-service
  labels:
    app: reporting-service
    environment: cdp-dev # Example environment label
    tier: backend
spec:
  selector:
    app: reporting-service
  ports:
    - protocol: TCP
      port: 80 # Service port
      targetPort: 8080 # Container port where Spring Boot application listens
      name: http
  type: ClusterIP # Exposes the service internally within the cluster

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: reporting-service-deployment
  labels:
    app: reporting-service
    environment: cdp-dev
    tier: backend
spec:
  replicas: 2 # Number of desired pods for high availability and scalability
  selector:
    matchLabels:
      app: reporting-service
  template:
    metadata:
      labels:
        app: reporting-service
        environment: cdp-dev
        tier: backend
    spec:
      containers:
        - name: reporting-service
          image: ltfs-offer-cdp/reporting-service:1.0.0 # Placeholder for the Docker image of the Reporting Service
          imagePullPolicy: IfNotPresent # Pull image only if it's not present on the node
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: kubernetes # Activates the 'kubernetes' Spring profile
            - name: SPRING_DATASOURCE_URL
              # Assuming a PostgreSQL service named 'postgresql-service' in the same namespace
              value: jdbc:postgresql://postgresql-service:5432/cdp_reporting_db
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: reporting-service-db-secret # Name of the Kubernetes Secret holding DB credentials
                  key: db_username # Key within the secret for the username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: reporting-service-db-secret
                  key: db_password # Key within the secret for the password
            # Add other environment variables as per application needs, e.g., Kafka, Redis, etc.
            # - name: KAFKA_BOOTSTRAP_SERVERS
            #   value: kafka-broker-service:9092
          resources:
            requests:
              memory: "512Mi" # Minimum memory requested by the container
              cpu: "500m" # Minimum CPU requested (0.5 CPU core)
            limits:
              memory: "1024Mi" # Maximum memory allowed for the container
              cpu: "1000m" # Maximum CPU allowed (1 CPU core)
          livenessProbe:
            # Checks if the application is running and healthy. If it fails, Kubernetes restarts the pod.
            httpGet:
              path: /actuator/health/liveness # Spring Boot Actuator liveness endpoint
              port: 8080
            initialDelaySeconds: 60 # Initial delay before liveness probe starts
            periodSeconds: 10 # How often (in seconds) to perform the probe
            timeoutSeconds: 5 # Number of seconds after which the probe times out
            failureThreshold: 3 # Number of consecutive failures for the probe to be considered failed
          readinessProbe:
            # Checks if the application is ready to serve traffic. If it fails, traffic is not routed to the pod.
            httpGet:
              path: /actuator/health/readiness # Spring Boot Actuator readiness endpoint
              port: 8080
            initialDelaySeconds: 30 # Initial delay before readiness probe starts
            periodSeconds: 5 # How often (in seconds) to perform the probe
            timeoutSeconds: 3 # Number of seconds after which the probe times out
            failureThreshold: 3 # Number of consecutive failures for the probe to be considered unready
          securityContext:
            # Enforces security best practices for the container
            allowPrivilegeEscalation: false # Prevents processes in the container from gaining more privileges
            readOnlyRootFilesystem: true # Makes the container's root filesystem read-only
            runAsNonRoot: true # Ensures the container runs as a non-root user
            runAsUser: 10001 # Specifies the user ID to run the container process as (example non-root user)
            capabilities:
              drop:
                - ALL # Drops all Linux capabilities for enhanced security
      # Optional: If using a private Docker registry, specify imagePullSecrets
      # imagePullSecrets:
      #   - name: regcred # Name of the secret containing Docker registry credentials
      # Optional: Define a specific service account if needed for fine-grained RBAC
      # serviceAccountName: reporting-service-sa