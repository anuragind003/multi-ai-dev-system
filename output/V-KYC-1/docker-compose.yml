version: '3.8'

services:
  db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Expose DB port for local access/tools if needed
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before starting backend
    volumes:
      - .:/app # Mount current directory for live reloading in development
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # --reload for dev

  frontend:
    # Placeholder for a React frontend
    # You would typically have a separate Dockerfile for your React app
    # and build it here. For simplicity, we'll just use a dummy image.
    image: nginx:alpine # Or your actual frontend image
    restart: always
    ports:
      - "3000:80" # Map host port 3000 to container port 80
    volumes:
      # Mount your frontend build directory here, e.g.:
      # - ./frontend/build:/usr/share/nginx/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro # Example for Nginx serving static files
    depends_on:
      - backend # Frontend might need backend to be up for API calls

volumes:
  postgres_data: