name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install poetry && poetry install --no-root

      - name: Run Black (formatter)
        run: poetry run black --check .

      - name: Run Flake8 (linter)
        run: poetry run flake8 .

      - name: Run Isort (import sorter)
        run: poetry run isort --check-only .

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint-format
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install poetry && poetry install --no-root

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in $(seq 1 10); do
            nc -z localhost 5432 && echo "PostgreSQL is ready" && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          pg_isready -h localhost -p 5432 -U testuser -d testdb

      - name: Run Pytest
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: poetry run pytest tests/

  build-scan-push:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write # Required to push to GitHub Packages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short,prefix=
            type=ref,event=branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'table'
          exit-code: '1' # Fail if any vulnerability is found
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true # Only report fixed vulnerabilities

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-scan-push
    environment: production # Use GitHub Environments for protection rules
    if: github.ref == 'refs/heads/main' # Only deploy main branch to prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host key (optional, for known_hosts)
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy with Docker Compose
        run: |
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "
            cd /path/to/your/app/directory && \
            echo '${{ secrets.DB_PASSWORD }}' > secrets/db_password.txt && \
            echo '${{ secrets.APP_SECRET_KEY }}' > secrets/app_secret_key.txt && \
            docker compose -f docker-compose.prod.yml pull && \
            docker compose -f docker-compose.prod.yml up -d --remove-orphans && \
            docker image prune -f # Clean up old images
          "
        env:
          # Pass environment variables needed for the remote server's .env file
          # It's better to manage these directly on the server or via secrets management tools
          # For this example, we assume .env is already on the server or secrets are used.
          # The secrets are passed to the remote server via files.
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          APP_SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}

  performance-test:
    name: Performance Test (Locust)
    runs-on: ubuntu-latest
    needs: deploy-prod # Run after successful deployment
    if: always() # Run even if deploy-prod fails, to get test results
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install poetry && poetry install --no-root

      - name: Run Locust tests
        # Assuming the app is accessible via a public URL or internal network
        # Replace with your actual production URL
        run: |
          poetry run locust -f locustfile.py --host http://${{ secrets.PROD_HOST }} --users 10 --spawn-rate 2 --run-time 60s --headless
        env:
          TARGET_HOST: http://${{ secrets.PROD_HOST }} # Or your actual public URL