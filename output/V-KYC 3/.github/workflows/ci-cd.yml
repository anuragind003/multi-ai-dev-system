name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install poetry && poetry install --no-root --with dev
      - name: Run Black formatter check
        run: poetry run black --check .
      - name: Run Isort check
        run: poetry run isort --check-only .
      - name: Run Pylint
        run: poetry run pylint app/

  security_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install poetry && poetry install --no-root --with dev
      - name: Run Bandit security scan
        run: poetry run bandit -r app/ -ll -f custom -o bandit_report.txt || true # Allow failure for reporting
      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit_report.txt
      - name: Build Docker image for Trivy scan
        run: docker build -t fastapi-app-scan .
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fastapi-app-scan'
          format: 'table'
          exit-code: '1' # Fail if vulnerabilities are found
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true # Only report fixed vulnerabilities

  unit_integration_tests:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install poetry && poetry install --no-root --with dev
      - name: Set up .env for tests
        run: |
          echo "DATABASE_URL=postgresql://testuser:testpassword@db:5432/testdb" >> .env
          echo "SECRET_KEY=testsecretkey" >> .env
      - name: Run Pytest
        run: poetry run pytest
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  performance_tests:
    runs-on: ubuntu-latest
    needs: [unit_integration_tests] # Ensure app is somewhat stable before perf tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install poetry && poetry install --no-root --with dev
      - name: Start app for performance tests
        run: |
          docker-compose -f docker-compose.yml up -d --build
          sleep 10 # Give app time to start
      - name: Run Locust performance tests
        run: poetry run locust -f tests/locustfile.py --host http://localhost:8000 --users 10 --spawn-rate 2 --run-time 30s --headless
      - name: Stop app
        if: always()
        run: docker-compose -f docker-compose.yml down

  build_push_image:
    runs-on: ubuntu-latest
    needs: [lint, security_scan, unit_integration_tests] # Only build if previous steps pass
    if: github.event_name == 'push' # Only push on actual pushes, not PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: your-docker-registry/fastapi-app:latest,your-docker-registry/fastapi-app:${{ github.sha }} # Replace with your actual registry

  deploy:
    runs-on: ubuntu-latest
    needs: [build_push_image]
    if: github.ref == 'refs/heads/main' # Deploy only from main branch
    environment: production # Link to GitHub Environments for secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/fastapi-app # Or your deployment directory
            # Ensure .env.prod is present on the server
            echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull your-docker-registry/fastapi-app:latest
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            docker-compose -f docker-compose.prod.yml up -d
            # Basic health check after deploy
            sleep 10
            docker-compose -f docker-compose.prod.yml ps
            curl -f http://localhost:8000/health || exit 1
            echo "Deployment successful!"