global:
  resolve_timeout: 5m

route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 1h
  receiver: 'default-receiver'

  routes:
    - match:
        severity: critical
      receiver: 'critical-alerts'
      continue: true # Continue matching other routes

    - match:
        severity: warning
      receiver: 'warning-alerts'

receivers:
  - name: 'default-receiver'
    # Example: A simple webhook for testing or integration with a custom script
    webhook_configs:
      - url: 'http://localhost:5000/webhook' # Replace with your actual webhook endpoint
        send_resolved: true

  - name: 'critical-alerts'
    # Example: Send critical alerts to a Slack channel
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX' # Replace with your Slack webhook URL
        channel: '#critical-alerts'
        send_resolved: true
        title: '[{{ .Status | toUpper }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}'
        text: '{{ range .Alerts }}*Alert:* {{ .Annotations.summary }}\n*Description:* {{ .Annotations.description }}\n*Severity:* {{ .Labels.severity | toUpper }}\n*Instance:* {{ .Labels.instance }}\n*Starts At:* {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}\n{{ end }}'

  - name: 'warning-alerts'
    # Example: Send warning alerts to a different Slack channel or email
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX' # Replace with your Slack webhook URL
        channel: '#warning-alerts'
        send_resolved: true
        title: '[{{ .Status | toUpper }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}'
        text: '{{ range .Alerts }}*Alert:* {{ .Annotations.summary }}\n*Description:* {{ .Annotations.description }}\n*Severity:* {{ .Labels.severity | toUpper }}\n*Instance:* {{ .Labels.instance }}\n*Starts At:* {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}\n{{ end }}'

# Inhibit rules (optional)
# - If AppDown fires, inhibit HighRequestLatency and HighErrorRate for the same instance
inhibit_rules:
  - source_match:
      alertname: 'AppDown'
    target_match:
      alertname: 'HighRequestLatency'
    equal: ['instance', 'job']
  - source_match:
      alertname: 'AppDown'
    target_match:
      alertname: 'HighErrorRate'
    equal: ['instance', 'job']