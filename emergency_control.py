#!/usr/bin/env python3
"""
Emergency Rate Limit Control Script

Usage:
  python emergency_control.py emergency   # Activate emergency mode (very conservative)
  python emergency_control.py reduced     # Activate reduced mode (moderate)
  python emergency_control.py normal      # Return to normal mode
  python emergency_control.py status      # Show current status
  python emergency_control.py stats       # Show detailed statistics
"""

import sys
import os
import json
from pathlib import Path

# Add project root to path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

def activate_emergency_mode():
    """Immediately activate emergency mode."""
    print("üö® ACTIVATING EMERGENCY MODE üö®")
    print("This will DRASTICALLY reduce API call rate to prevent 429 errors.")
    
    env_vars = {
        "MAISD_EMERGENCY_MODE": "true",
        "MAISD_CALLS_PER_MINUTE": "8",      # Very conservative
        "MAISD_BASE_DELAY": "5.0",          # 5 second minimum delay
        "MAISD_MAX_DELAY": "120",           # Up to 2 minute delays
        "MAISD_ENABLE_BATCHING": "true",
        "MAISD_AGGRESSIVE_CACHE": "true",
        "MAISD_DEV_MODE": "true",
        "MAISD_MINIMAL_VALIDATION": "true",
        "MAISD_SKIP_QUALITY_CHECK": "true"
    }
    
    # Set environment variables for current session
    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"‚úÖ Set {key}={value}")
    
    # Also create a .env file for persistence
    env_file = PROJECT_ROOT / ".env"
    
    # Read existing .env if it exists
    existing_vars = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    existing_vars[key] = value
    
    # Update with emergency settings
    existing_vars.update(env_vars)
    
    # Write back to .env
    with open(env_file, 'w') as f:
        f.write("# Multi-AI Development System Configuration\n")
        f.write("# Generated by emergency_control.py\n\n")
        for key, value in existing_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"üíæ Settings saved to {env_file}")
    print("\nüî• EMERGENCY MODE ACTIVE:")
    print("  - Max 8 API calls per minute")
    print("  - 5+ second delays between calls")
    print("  - Quality checks disabled")
    print("  - Aggressive caching enabled")
    print("  - Development mode shortcuts enabled")

def activate_reduced_mode():
    """Activate reduced call mode."""
    print("‚ö° ACTIVATING REDUCED CALLS MODE")
    print("This will moderately reduce API call rate.")
    
    env_vars = {
        "MAISD_EMERGENCY_MODE": "false",
        "MAISD_REDUCED_CALLS": "true",
        "MAISD_CALLS_PER_MINUTE": "25",     # Moderate reduction
        "MAISD_BASE_DELAY": "2.0",          # 2 second delays
        "MAISD_MAX_DELAY": "60",            # Up to 1 minute delays
        "MAISD_ENABLE_BATCHING": "true",
        "MAISD_AGGRESSIVE_CACHE": "true",
        "MAISD_DEV_MODE": "false",
        "MAISD_MINIMAL_VALIDATION": "false",
        "MAISD_SKIP_QUALITY_CHECK": "false"
    }
    
    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"‚úÖ Set {key}={value}")
    
    print("\n‚ö° REDUCED MODE ACTIVE:")
    print("  - Max 25 API calls per minute")
    print("  - 2+ second delays between calls")
    print("  - Normal quality checks")
    print("  - Enhanced caching enabled")

def activate_normal_mode():
    """Return to normal operation."""
    print("üéâ RETURNING TO NORMAL MODE")
    
    env_vars = {
        "MAISD_EMERGENCY_MODE": "false",
        "MAISD_REDUCED_CALLS": "false",
        "MAISD_CALLS_PER_MINUTE": "50",     # Normal rate
        "MAISD_BASE_DELAY": "1.0",          # Minimal delays
        "MAISD_MAX_DELAY": "30",            # Standard max delay
        "MAISD_ENABLE_BATCHING": "true",
        "MAISD_AGGRESSIVE_CACHE": "false",
        "MAISD_DEV_MODE": "false",
        "MAISD_MINIMAL_VALIDATION": "false",
        "MAISD_SKIP_QUALITY_CHECK": "false"
    }
    
    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"‚úÖ Set {key}={value}")
    
    print("\nüéâ NORMAL MODE ACTIVE:")
    print("  - Max 50 API calls per minute")
    print("  - 1+ second delays between calls")
    print("  - Full quality checks enabled")
    print("  - Standard caching")

def show_status():
    """Show current rate limiting status."""
    print("üìä CURRENT RATE LIMITING STATUS")
    print("=" * 40)
    
    # Check current mode
    emergency = os.environ.get("MAISD_EMERGENCY_MODE", "false").lower() == "true"
    reduced = os.environ.get("MAISD_REDUCED_CALLS", "false").lower() == "true"
    
    if emergency:
        mode = "üö® EMERGENCY"
        mode_color = "RED"
    elif reduced:
        mode = "‚ö° REDUCED"
        mode_color = "YELLOW"
    else:
        mode = "‚úÖ NORMAL"
        mode_color = "GREEN"
    
    print(f"Current Mode: {mode}")
    print(f"Calls per minute: {os.environ.get('MAISD_CALLS_PER_MINUTE', '60')}")
    print(f"Base delay: {os.environ.get('MAISD_BASE_DELAY', '0.5')}s")
    print(f"Max delay: {os.environ.get('MAISD_MAX_DELAY', '30')}s")
    print(f"Batching enabled: {os.environ.get('MAISD_ENABLE_BATCHING', 'false')}")
    print(f"Aggressive cache: {os.environ.get('MAISD_AGGRESSIVE_CACHE', 'false')}")
    print(f"Dev mode: {os.environ.get('MAISD_DEV_MODE', 'false')}")

def show_detailed_stats():
    """Show detailed statistics and recommendations."""
    print("üìà DETAILED API OPTIMIZATION STATISTICS")
    print("=" * 50)
    
    # Try advanced rate limiting first
    try:
        from advanced_rate_limiting import get_advanced_rate_limiter
        rate_limiter = get_advanced_rate_limiter()
        
        if rate_limiter.is_enabled():
            stats = rate_limiter.get_comprehensive_stats()
            
            # Rate limiting stats
            if 'rate_limiting' in stats:
                rl_stats = stats['rate_limiting']
                print("üö¶ Advanced Rate Limiting Status:")
                print(f"  Current mode: {rl_stats.get('current_mode', 'unknown').upper()}")
                print(f"  Mode duration: {rl_stats.get('mode_duration_minutes', 0):.1f} minutes")
                print(f"  Calls in last minute: {rl_stats.get('current_calls_per_minute', 0)}")
            
            # API tracking stats
            if 'api_tracking' in stats:
                api_stats = stats['api_tracking']
                stats_15 = api_stats.get('stats_15min', {})
                stats_60 = api_stats.get('stats_1hour', {})
                
                print("\nAPI Call Activity (Last 15 minutes):")
                print(f"  üìû Total calls: {stats_15.get('total_calls', 0)}")
                print(f"  ‚ùå Total errors: {stats_15.get('total_errors', 0)}")
                print(f"  üìä Error rate: {stats_15.get('error_rate', 0):.1f}%")
                print(f"  ‚è±Ô∏è  Avg response time: {stats_15.get('avg_response_time', 0):.2f}s")
                print(f"  üìà Performance trend: {stats_15.get('performance_trend', 'unknown')}")
                
                print("\nAPI Call Activity (Last 1 hour):")
                print(f"  üìû Total calls: {stats_60.get('total_calls', 0)}")
                print(f"  ‚ùå Total errors: {stats_60.get('total_errors', 0)}")
                print(f"  üìä Error rate: {stats_60.get('error_rate', 0):.1f}%")
                
                # Advanced recommendations
                error_rate = stats_15.get('error_rate', 0)
                if error_rate > 20:
                    print("\nüö® RECOMMENDATION: Very high error rate - EMERGENCY mode recommended!")
                elif error_rate > 10:
                    print("\n‚ö†Ô∏è  RECOMMENDATION: High error rate - consider EMERGENCY mode")
                elif error_rate > 5:
                    print("\n‚ö° RECOMMENDATION: Elevated error rate - consider REDUCED mode")
                else:
                    print("\n‚úÖ GOOD: Error rate is acceptable")
            
            # Optimization stats
            if 'optimization' in stats:
                opt_stats = stats['optimization']
                cache_stats = opt_stats.get('cache', {})
                optimization = opt_stats.get('optimization', {})
                
                print(f"\n‚ö° Optimization Performance:")
                print(f"  üíæ Cache hit rate: {cache_stats.get('hit_rate', 0):.1f}%")
                print(f"  üíæ Cache entries: {cache_stats.get('total_entries', 0)}")
                print(f"  üìä API calls saved by cache: {optimization.get('cache_saves', 0)}")
                print(f"  üìä API calls saved by dedup: {optimization.get('dedup_saves', 0)}")
                print(f"  üîÑ Successful retries: {optimization.get('successful_retries', 0)}")
            
            print(f"\nüí° TIP: Use 'python advanced_rate_limiting/utilities.py stats' for more details")
            return
        
    except ImportError:
        pass  # Fall through to basic stats
    
    # Fallback to basic statistics
    print("‚ö†Ô∏è  Advanced rate limiting not available")
    print("Basic environment-based rate limiting is still active via .env variables")
    
    # Show current environment variables
    print("\nCurrent Environment Settings:")
    rate_vars = {
        "MAISD_EMERGENCY_MODE": os.environ.get("MAISD_EMERGENCY_MODE", "false"),
        "MAISD_REDUCED_CALLS": os.environ.get("MAISD_REDUCED_CALLS", "false"), 
        "MAISD_CALLS_PER_MINUTE": os.environ.get("MAISD_CALLS_PER_MINUTE", "60"),
        "MAISD_BASE_DELAY": os.environ.get("MAISD_BASE_DELAY", "1.0"),
        "RATE_LIMIT_DELAY": os.environ.get("RATE_LIMIT_DELAY", "1.0")
    }
    
    for key, value in rate_vars.items():
        print(f"  {key}: {value}")
    
    # Basic recommendations
    emergency = os.environ.get("MAISD_EMERGENCY_MODE", "false").lower() == "true"
    reduced = os.environ.get("MAISD_REDUCED_CALLS", "false").lower() == "true"
    
    if emergency:
        print("\nüö® Currently in EMERGENCY mode")
        print("üí° TIP: Consider using advanced rate limiting for better optimization")
    elif reduced:
        print("\n‚ö° Currently in REDUCED mode")
    else:
        print("\n‚úÖ Currently in NORMAL mode")
    
    # Show current settings
    print("\nCurrent Configuration:")
    show_status()

def main():
    """Main entry point."""
    if len(sys.argv) != 2:
        print(__doc__)
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    if command == "emergency":
        activate_emergency_mode()
    elif command == "reduced":
        activate_reduced_mode()
    elif command == "normal":
        activate_normal_mode()
    elif command == "status":
        show_status()
    elif command == "stats":
        show_detailed_stats()
    else:
        print(f"‚ùå Unknown command: {command}")
        print(__doc__)
        sys.exit(1)

if __name__ == "__main__":
    main()
